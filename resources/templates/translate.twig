{% extends "base.twig" %}

{% block css %}
	<link rel="stylesheet" type="text/css" href="css/translate.css?v=0.0.1"/>
{% endblock %}

{% block content %}
<div id="translation">
    <header>
        Traduciendo <span id="episode-title"><a href='/episodes/{{ sub.version.episode.id }}'>{{ full_name }}</a></span>
    </header>

    <div id="translation-details">
        <div id='filters'>
            Filtrar por cadena: <input type="text" id="text-filter" /><button type="submit" id="apply" @click="applyFilter">Aplicar</button>
        </div>

        <div class="page-wrapper">
            <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage"></pagelist>
        </div>

        <table id="sequences">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Autor: <span id='author-filter-name'>Todos</span> <i class="fa fa-caret-down" aria-hidden="true"></i></th>
                    <th>Tiempos</th>
                    <th>Idioma secundario: <span id='secondary-language-name'>English</span> <i class="fa fa-caret-down" aria-hidden="true"></i></th>
                    <th>Traducción al <span id='target-language-name'>{{ sub_lang }}</span></th>
                    <th></th>
                </tr>
            </thead>

            {% verbatim %}
                <template v-for="seq in sequences">
                    <sequence v-for="hseq in seq.history" 
                        :key="seq.id + 'hist' + seq.number"

                        :original-id="hseq.id"
                        :number="seq.number"
                        :p-locked="false"
                        :p-verified="false"
                        :original-author="hseq.author"
                        :tstart="hseq.tstart"
                        :tend="hseq.tend"
                        :secondary-text="seq.secondary_text"
                        :original-text="hseq.text"
                        :history="true">
                    ></sequence>
                    
                    <sequence 
                        :key="seq.id + '' + seq.number"
                        
                        :original-id="seq.id"
                        :number="seq.number"
                        :p-locked="seq.locked"
                        :p-verified="seq.verified"
                        :original-author="seq.author"
                        :tstart="seq.tstart"
                        :tend="seq.tend"
                        :secondary-text="seq.secondary_text"
                        :original-text="seq.text"
                        :history="false"
                    ></sequence>
                </template>
            {% endverbatim %}
        </table>

        <div class="page-wrapper">
            <pagelist :pages="pages" :cur-page="curPage" :last-page="lastPage"></pagelist>
        </div>
    </div>

    <div id="translation-comments">
        <h4>Comentarios de traducción</h4>

        <template v-for="comment in comments">
            <comment
                :key="comment.id"

                :id="comment.id"
                :user="comment.user"
                :text="comment.text"
                :published-at="comment.published_at"
            >
            </comment>
        </template>

        <div class='newcomment-box'>
            <textarea id="new-comment" v-model="newComment" placeholder="Escribe aquí tu comentario..."></textarea>
            <button :class="{'hidden': newComment == ''}" class="comment-publish" @click="publishComment">Enviar</button>
        </div>
    </div>
</div>

<script type="text/javascript" src="js/timeago.min.js"></script>
<script type="text/javascript">
    let subID = {{ sub.id }};
    let canLock = {{ auth.has_role('ROLE_TH') ? 'true' : 'false'}};
    let pageCount = {{ page_count }};
    let availSecondaryLangs = {{ avail_secondary_langs|raw }};
    let textFilter = "";
    let myId = {{ auth.user.id }};
    let myName = "{{ auth.user.username }}";
    let canDeleteComments = {{ auth.has_role('ROLE_MOD') ? 'true' : 'false' }};

    function loadPage(pageNum, secondaryLang) {
        $.ajax({
            url: '/subtitles/{{ sub.id }}/translate/page/' + pageNum,
            method: 'GET',
            data: {
                textFilter: textFilter,
                secondaryLang: secondaryLang
            }
        }).done(function(pageData) {
            // Prepare sequences
            let sequences = [];
            Object.keys(pageData).forEach(function(k) {
                let sequence = pageData[k];

                // Add some state variables
                sequence.editing = false;
                sequence.canSave = false;
                sequence.lineCounters = [];
                
                sequences.push(sequence);
            });

            translation.sequences = sequences;

            // Update pagelist
            translation.curPage = pageNum;
        });
    }

    {# FIXME: The template string breaks compatibility for certain browsers (http://caniuse.com/#search=template%20literal) #}
    {% verbatim %}
    Vue.component('sequence', {
        template: `
            <tr :class="{'locked':  locked, 'verified': verified, 'current': !history, 'history': history}">
                <td><span v-if="!history">{{ number }}</span></td>
                <td class="user"><a :href="'/user/' + author.id">{{ author_name }}</a></td>
                <td class="time">{{ tstart | nice_time }} <i class="fa fa-long-arrow-right"></i> {{ tend | nice_time }}</td>
                <td class="text"><pre>{{ secondaryText }}</pre></td>
                <td class="text" @click="editSequence" :class="{'translatable': !history}">
                    <pre v-if="!editing && text">{{ text }}</pre>
                    <pre v-if="!editing && !text" class="untranslated">- Sin traducir -</pre>

                    <textarea v-model="text" v-if="editing"></textarea>
                    <div class="line-status" v-if="editing">
                        <span class="line-counter" :class="lineCounters[0] > 40 ? 'counter-error' : (lineCounters[0] > 30 ? 'counter-warning' : '')">{{ lineCounters[0] }}</span>
                        <span class="line-counter" v-if="lineCounters[1]" :class="lineCounters[1] > 40 ? 'counter-error' : (lineCounters[1] > 30 ? 'counter-warning' : '')">{{ lineCounters[1] }}</span>
                    </div>
                </td>
                <td class="actions">
                    <div v-if="!history && editing">
                        <i class="fa fa-floppy-o" :class="{'disabled': !canSave}" @click="save"></i>
                        <i class="fa fa-times-circle-o" @click="discard"></i>
                    </div>

                    <div v-if="translated && !history && !editing">
                        <!--<i class="fa" @click="toggleVerify" :class="verified ? 'fa-check-circle' : 'fa-question-circle-o'" v-if="!locked"></i>-->
                        <i class="fa" @click="toggleLock" :class="locked ? 'fa-lock' : 'fa-unlock-alt'" v-if="canLock || locked"></i>
                    </div>

                    <div v-if="false && history">
                        <i class="fa fa-undo" aria-hidden="true"></i>
                    </div>
                </td>
            </tr>
            `,
        
        props: ['originalId', 'pLocked', 'pVerified', 'number', 'originalAuthor', 'tstart', 'tend', 'secondaryText', 'originalText', 'history'],
        data: function() {
            return {
                id: this.originalId,
                author: this.originalAuthor,
                text: this.originalText,
                locked: this.pLocked,
                verified: this.pVerified,
                editing: false
            }
        },
        filters: {
            nice_time: function (ms) {
                if (!ms)
                    return '00:00:00.000';

                let h = 0, m = 0, s = 0;
                s = Math.floor(ms/1000);

                h = Math.floor(s/3600);
                s -= h * 3600;
                m = Math.floor(s/60);
                s -= m * 60;

                ms -= (s + m * 60 + h * 3600)*1000;

                let stime = "";
                if(h < 10) stime += "0";
                stime += h+":";
                if(m < 10) stime += "0";
                stime += m+":";
                if(s < 10) stime += "0";
                stime += s+".";
                if(ms < 100) stime += "0";
                if(ms < 10) stime += "0";
                stime += ms;

                return stime;
            }
        },
        computed: {
            lineCounters: function() {
                let lines = this.text.split("\n");
                let lineCounters = [];

                for(let i = 0; i < lines.length; ++i) {
                    let text = lines[i].replace(/ +/g,' ');
                    if(text.trim().length > 0) {
                        lineCounters[i] = text.trim().length;
                    } else {
                        lineCounters[i] = text.length;
                    }
                }
                
                return lineCounters;
            },

            canSave: function() {
                return !this.history && this.lineCounters.length > 0 && this.lineCounters[0] > 0 && this.lineCounters[0] <= 40
                         && (!this.lineCounters[1] || this.lineCounters[1] <= 40);
            },

            
            canLock: function() {
                return canLock && !this.history && this.id;
            },

            translated: function() {
                return this.id != 0
            },

            author_name: function() {
                return this.author.name ? this.author.name : " - ";
            }

        },
        methods: {
            editSequence: function() {         
                if(this.editing || this.history) {
                    return true; // Already , no effect
                }

                $.ajax({
                    url: '/subtitles/'+subID+'/translate/open',
                    method: 'POST',
                    data: {
                        seqID: this.id
                    }
                }).done(function(reply) {
                    if(reply.ok) {
                        this.editing = true;
                        this.curText = this.text;
                    } else {
                        alertify.error(reply.msg);
                    }
                }.bind(this));
            },

            save: function() {
                if(!this.canSave)
                    return false;
                
                let pthis = this;
                if(this.id) {
                    // Editing a sequence, save the changes
                    $.ajax({
                        url: '/subtitles/'+subID+'/translate/save',
                        method: 'POST',
                        data: {
                            seqID: this.id,
                            text: this.text,
                        }
                    }).done(function(newId){
                        pthis.id = newId;
                        pthis.text = pthis.text.trim().replace(/ +/g,' ');
                        if(!pthis.text) {
                            pthis.text = " ";
                        }
                    })
                    .fail(function() {
                        alertify.error("Ha ocurrido un error al intentar guardar la secuencia");
                        pthis.editing = true;
                    });
                } else {
                    // Translating a sequence for the first time
                    $.ajax({
                        url: '/subtitles/'+subID+'/translate/create',
                        method: 'POST',
                        data: {
                            number: this.number,
                            text: this.text
                        }
                    }).done(function(newId){
                        pthis.id = newId;
                        pthis.text = pthis.text.trim().replace(/ +/g,' ');
                        if(!pthis.text) {
                            pthis.text = " ";
                        }
                        
                        pthis.author = {
                            id: myId,
                            name: myName
                        };
                    })
                    .fail(function() {
                        alertify.error("Ha ocurrido un error al intentar guardar la secuencia");
                        pthis.editing = true;
                    });
                }

                this.editing = false;
            },

            discard: function() {
                // Discard sequence changes
                this.text = this.curText;
                this.editing = false;
            },

            toggleLock: function() {
                if(!canLock) {
                    return false;
                }

                let preLock = this.locked;
                this.locked = !this.locked;

                $.ajax({
                    url: '/subtitles/'+subID+'/translate/lock',
                    method: 'POST',
                    data: {
                        seqID: this.id
                    }
                }).fail(function() {
                    // Only revert if the request failed
                    this.locked = preLock;
                }.bind(this));
            }
        },
    });
    {% endverbatim %}

    /**************************
    *        PAGINATION
    ***************************/
    Vue.component('pagelist', {
        template: `
            <ul class="pagination">
                <li class="change-page" @click="prevPage" :class="{ disabled: curPage == 1 }"><i class="fa fa-chevron-left" aria-hidden="true"></i></li>
                {% verbatim %}<li v-for="page in pages" class="target-page" :class="page == curPage ? 'active' : ''" @click="toPage(page)">{{ page }}</li>{% endverbatim %}
                {#
                    TODO: Handle the fact that pages might not all fit at the same time?
                    <li class="expand-pages">...</li>
                    <li class="target-page" data-page="40">40</li>
                #}
                <li class="change-page" @click="nextPage" :class="{ disabled: curPage == lastPage }"><i class="fa fa-chevron-right" aria-hidden="true"></i></a></li>
            </ul>
        `,
        props: ["curPage", "pages", "lastPage"],
        methods: {
            nextPage: function() {
                if(this.curPage < this.lastPage)
                    this.toPage(this.curPage + 1);
            },

            prevPage: function() {
                if(this.curPage > 1)
                    this.toPage(this.curPage - 1);
            },

            toPage: function(page) {
                loadPage(page, availSecondaryLangs[0]);
            }
        }
    });
    
   /**************************
    *        COMMENTS
    ***************************/

    {# TODO: This code is copy-paste of that of the episode view, unify #}
    {% verbatim %}
    Vue.component('comment', {
        template: `
            <article class='comment'>
                <header>
                    <ul>
                        <li class='comment-user'>
                            <a :href="'/user/' + user.id">{{ user.name }}</a>
                        </li>
                        <li class='comment-time'>
                            {{ date }}
                        </li>
                        <li class='comment-actions' v-if="canDelete">
                            <i class="fa fa-times" aria-hidden="true" @click="remove"></i>
                        </li>
                    </ul>
                </header>
                <section class='comment-body'>
                    {{ text }}
                </section>
                <section class='comment-actions'>
                </section>
            </article>
            `,
        
        props: ['id', 'user', 'text', 'published-at'],
        data: function() {
            return {
                date: '',
                canDelete: canDeleteComments
            }
        },
        created: function() {
            this.update = setInterval(this.updateDate, 10000);
            this.updateDate();
        },
        methods: {
            updateDate: function() {
                this.date = timeago().format(this.publishedAt, 'es')
            }, 

            remove: function() {
                $.ajax({
                    url: '/subtitles/'+subID+'/translate/comments/'+this.id,
                    method: 'DELETE'
                }).done(function() {
                    loadComments();
                })
            }
        }
    });
    {% endverbatim %}
    
    let comments = new Vue({
        el: '#translation-comments',
        data: {
            newComment: '',
            comments: [
            ]
        },
        methods: {
            publishComment: function() {
                let comment = this.newComment;
                this.newComment = '';
                
                $.ajax({
                    url: '/subtitles/'+subID+'/translate/comments/submit',
                    method: 'POST',
                    data: {
                        text: comment
                    }
                }).done(function() {
                    // Cheap solution: reload the entire comment box
                    loadComments();
                }).fail(function() {
                    alertify.error("Ha ocurrido un error al enviar tu comentario");
                });
            }
        }
    });

    function loadComments()
    {
        $.ajax({
            url: '/subtitles/'+subID+'/translate/comments',
            method: 'GET'
        }).done(function(reply) {
            comments.comments = reply;
        }).fail(function() {
            alertify.error("Ha ocurrido un error tratando de cargar los comentarios");
        })
    }

    /**
    * Boot
    */
    let translation = new Vue({
        el: '#translation-details',
        data: {
            sequences: [],
            pages: [],
            curPage: 0,
            lastPage: pageCount
        },
        methods: {
            applyFilter: function() {
                let newTextFilter = $("#text-filter").val();
                if(newTextFilter == textFilter) {
                    return;
                }
                
                textFilter = newTextFilter;
                loadPage(1, availSecondaryLangs[0]);
            }
        }
    });

    for(let p = 1; p < pageCount + 1; ++p) {
        translation.pages.push(p);
    }

    loadPage(1, availSecondaryLangs[0]); // Load first page by default
    loadComments();
    setInterval(loadComments, 30000);
</script>
{% endblock %}