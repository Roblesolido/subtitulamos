{% extends "base.twig" %}
{% import 'macros/assets.twig' as assets %}

{% block search %}{# Do not display top search here #}{% endblock %}
{% block css %}{{ assets.css('index') }}{% endblock %}

{% block content %}
	<div class='main_container'>
		<div id="main_state">
			<div id="logo"></div>
			<div id="website_name">subtitulamos.tv</div>
			<div id="website_title">{{ catchphrase }}</div>
		</div>
		<div id="search">
			<a href="/"><div id="white-logo-searchbar" class="white_logo hidden"></div></a>
			<input type="text" placeholder="Busca una serie... Ejemplo: Game of Thrones 7x01" id="search_bar" />
			<div id="search_subtitles_button" title="Buscar"><i id="search_subtitles" class="fa fa-search" aria-hidden="true"></i></div>
			<ul id="search-results" class='hidden'></ul>
		</div>
		<div id="category_navigation_list">
			<div id="category_navigation_title">...o explora las siguientes categorías</div>
			{#<span class="hint--top hint--bounce hint--rounded" data-hint="Los subtítulos más buscados"><div class="category_navigation_item" id="most-downloaded">Lo más descargado</div></span>#}
			<span class="hint--top hint--bounce hint--rounded" data-hint="Últimos subtítulos subidos"><div class="category_navigation_item" id="last-uploaded">Últimas subidas</div></span>
			<span class="hint--top hint--bounce hint--rounded" data-hint="Últimas traducciones completadas"><div class="category_navigation_item" id="last-completed">Últimas traducciones</div></span>
			<span class="hint--top hint--bounce hint--rounded" data-hint="Últimas modificaciones"><div class="category_navigation_item" id="last-edited">Últimas ediciones</div></span>
		</div>
		{% verbatim %}
		<div id="incategory_state" class="hidden">
			<div id="incategory_board">
				<table class="clip_global_info" v-for="ep in episodes">
					<tr class="clip_info_row fade_slide_in" :data-target="subURI(ep)">
						<td class="clip_downloads" v-if="ep.download_count">
							<div class="clip_downloads_times">{{ ep.download_count }}</div>
							<div class="clip_downloads_text">descargas</div>
						</td>
						<td class="clip_activity_since" v-if="ep.time">
							<div class="clip_row_text_faded">hace</div>
							<div class="clip_row_time">{{ ep.time_ago }}</div>
							<div class="clip_row_text">{{ ep.time_unit }}</div>
						</td>
						<td class="visual_separator"></td>
						<td class="clip_title_row" :class="{ 'clip_detailed': ep.lang_name != undefined }">
							<div class="clip_title">{{ ep.name }}</div>
							<div class="clip_add_details">
								<div class="clip_language">{{ ep.lang_name }}</div>
								<div class="new_season" v-if="ep.new_season">Nueva Temporada</div>
								<div class="new_series" v-if="ep.new_series">Nueva Serie</div>
							</div>
						</td>
					</tr>
				</table>
				<div id='pages'>
					<div id='prev-page' class='hidden'>
						<i class='fa fa-chevron-circle-left'></i> Página anterior
					</div>
					<div id='next-page'>
						Siguiente página <i class='fa fa-chevron-circle-right'></i>
					</div>
				</div>
			</div>
		</div>
		{% endverbatim %}
	</div>
{% endblock %}

{% block scripts %}
	<script>
		let episodeList = new Vue({
			el: "#incategory_board",
			data: {
				category: '',
				episodes: [],
			}, methods: {
				subURI: function(ep) {
					return "/episodes/"+ep.id+"/"+ep.slug;
				},

				update: function() {
					let self = this;
					let u = function() {
						self.episodes.forEach(function(ep, idx, arr) {
							diff = dateDiff(new Date(ep.time), new Date(Date.now()))/1000;
							if(diff >= 60) {
								diff = Math.floor(diff / 60);
								if(diff >= 60) {
									diff = Math.floor(diff / 60);
									if(diff >= 24) {
										diff = Math.floor(diff / 24);
										unit = diff > 1 ? "días" : "día";
									} else {
										unit = diff > 1 ? "horas" : "hora";
									}
								} else {
									unit = diff > 1 ? "mins" : "min";
								}
							} else {
								// < 60s, display every 10s
								diff = Math.floor(diff/10) * 10;
								unit = "seg";
							}

							if(diff != ep.time_ago) {
								ep.time_ago = diff;
								ep.time_unit = unit;
								arr[idx] = ep;
							}
						});
					};
					
					u(); // Insta update times
					this.interval = setInterval(u, 2000);
				}
			}, watch: {
				episodes: function(newEpisodes) {
					clearInterval(this.interval);
					this.update();
				}
			}
		});

		let categoryPage = {};
		let rowsPerPage = 0;
		function search(target, page) {
			$.ajax({
				url: "/search/"+target,
				method: "get",
				data: {
					page: page
				}
			}).done(function(data) {
				data.forEach(function(_, idx, data){
					data[idx].time_ago = 0;
					data[idx].time_unit = "sec";
				});

				episodeList.category = target;
				episodeList.episodes = data;
				categoryPage[target] = page;

				if(rowsPerPage == 0 || rowsPerPage < episodeList.episodes.length) {
					// First load? Let's guess the value
					rowsPerPage = episodeList.episodes.length;
				}

				$("#next-page").toggleClass("hidden", episodeList.episodes.length < rowsPerPage);
				$("#prev-page").toggleClass("hidden", page <= 1);
			});
		}

		$("#prev-page").on("click", function() {
			let targetPage = Math.max(categoryPage[episodeList.category] - 1, 1);
			if(targetPage == 1) {
				$(this).toggleClass("hidden", true);
			}

			$("#next-page").toggleClass("hidden", false);
			search(episodeList.category, targetPage);
		});

		$("#next-page").on("click", function() {
			let targetPage = Math.min(categoryPage[episodeList.category] + 1, 10);
			if(targetPage >= 10) {
				$(this).toggleClass("hidden", true);
			}

			$("#prev-page").toggleClass("hidden", false);
			search(episodeList.category, targetPage);
		});

		$(".category_navigation_item").on("click", function() {
			let $categoryClicked = $(this);	
			let $mainState = $("#main_state");
			let $incategoryState = $("#incategory_state");
			let $categoryNavTitle = $("#category_navigation_title");
			let $searchBarContainer = $("#search");
			let $categoryNavList = $("#category_navigation_list");
			let $whiteLogoSearchBar = $("#white-logo-searchbar");
			
			$categoryNavTitle.toggleClass("hidden", true);
			$incategoryState.toggleClass("hidden", false);
			

			if ($(".category_navigation_item").hasClass("nvbi_active")){
				$(".category_navigation_item").toggleClass("nvbi_active", false);
				$categoryClicked.toggleClass("nvbi_active", true);
			}
			else {
				window.scrollTo(0, 0);	
				$categoryClicked.toggleClass("nvbi_active", true);
				
				$mainState.toggleClass("fade_out", true);

				$searchBarContainer.toggleClass("move_up_searchbar",true);
				$categoryNavList.toggleClass("move_up_searchbar",true).toggleClass("fade_in", true);
				$incategoryState.toggleClass("move_up_searchbar",true).toggleClass("fade_in", true);
				$whiteLogoSearchBar.toggleClass("hidden", false);
				setTimeout(function(){		
					$mainState.toggleClass("hidden", true);
					$searchBarContainer.toggleClass("move_up_searchbar", false);
					$categoryNavList.toggleClass("move_up_searchbar", false).toggleClass("fade_in", false);
					$incategoryState.toggleClass("move_up_searchbar", false).toggleClass("fade_in", false);
				}, 580);
			}
			
			let target;
			let id = $categoryClicked.attr("id");
			switch(id) {
				case "most-downloaded":
					target = 'popular';
					break;

				case "last-uploaded":
					target = "uploads";
					break;

				case "last-completed":
					target = "completed";
					break;

				case "last-edited":
					target = "modified";
					break;
			}

			if(!target) // Nothing to do
				return;

			search(target, 1);
		});

	</script>
{% endblock %}